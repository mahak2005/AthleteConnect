"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import type { Coach } from "@/data/coaches"
import { BookingForm } from "./booking-form"
import { BookingConfirmation } from "./booking-confirmation"

interface BookingModalProps {
  isOpen: boolean
  onClose: () => void
  coach: Coach
  selectedPackage:
    | {
        id: string
        title: string
        price: number
        duration?: string
        type?: string
      }
    | undefined
}

export function BookingModal({ isOpen, onClose, coach, selectedPackage }: BookingModalProps) {
  const [step, setStep] = useState<"form" | "confirmation">("form")
  const [bookingDetails, setBookingDetails] = useState<any>(null)

  const handleFormSubmit = (formData: any) => {
    // In a real app, you would send this data to your backend
    console.log("Booking form submitted:", formData)

    // Create booking details for confirmation
    setBookingDetails({
      ...formData,
      coach: coach.name,
      package: selectedPackage?.title,
      price: selectedPackage?.price,
      meetingLink: "https://meet.google.com/abc-defg-hij", // This would be generated by your backend
      date: new Date(formData.date).toLocaleDateString(),
      time: formData.time,
    })

    // Move to confirmation step
    setStep("confirmation")
  }

  const handleClose = () => {
    // Reset state when closing
    setStep("form")
    setBookingDetails(null)
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md md:max-w-lg">
        <DialogHeader>
          <DialogTitle>{step === "form" ? `Book Session with ${coach.name}` : "Booking Confirmed!"}</DialogTitle>
          <DialogDescription>
            {step === "form"
              ? selectedPackage
                ? `${selectedPackage.title} - $${selectedPackage.price}`
                : "Complete the form below to book your session"
              : "Your session has been booked successfully"}
          </DialogDescription>
        </DialogHeader>

        {step === "form" && selectedPackage && (
          <BookingForm coach={coach} packageDetails={selectedPackage} onSubmit={handleFormSubmit} />
        )}

        {step === "confirmation" && bookingDetails && (
          <BookingConfirmation bookingDetails={bookingDetails} onClose={handleClose} />
        )}
      </DialogContent>
    </Dialog>
  )
}

